// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncInstancesClient is the client API for SyncInstances service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncInstancesClient interface {
	GrpcFuncInstanceIsReady(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InstanceIsReadyReplay, error)
	GrpcFuncCommunication(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type syncInstancesClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncInstancesClient(cc grpc.ClientConnInterface) SyncInstancesClient {
	return &syncInstancesClient{cc}
}

func (c *syncInstancesClient) GrpcFuncInstanceIsReady(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InstanceIsReadyReplay, error) {
	out := new(InstanceIsReadyReplay)
	err := c.cc.Invoke(ctx, "/demo.SyncInstances/grpcFuncInstanceIsReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncInstancesClient) GrpcFuncCommunication(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/demo.SyncInstances/grpcFuncCommunication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncInstancesServer is the server API for SyncInstances service.
// All implementations must embed UnimplementedSyncInstancesServer
// for forward compatibility
type SyncInstancesServer interface {
	GrpcFuncInstanceIsReady(context.Context, *Empty) (*InstanceIsReadyReplay, error)
	GrpcFuncCommunication(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedSyncInstancesServer()
}

// UnimplementedSyncInstancesServer must be embedded to have forward compatible implementations.
type UnimplementedSyncInstancesServer struct {
}

func (UnimplementedSyncInstancesServer) GrpcFuncInstanceIsReady(context.Context, *Empty) (*InstanceIsReadyReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcFuncInstanceIsReady not implemented")
}
func (UnimplementedSyncInstancesServer) GrpcFuncCommunication(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcFuncCommunication not implemented")
}
func (UnimplementedSyncInstancesServer) mustEmbedUnimplementedSyncInstancesServer() {}

// UnsafeSyncInstancesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncInstancesServer will
// result in compilation errors.
type UnsafeSyncInstancesServer interface {
	mustEmbedUnimplementedSyncInstancesServer()
}

func RegisterSyncInstancesServer(s grpc.ServiceRegistrar, srv SyncInstancesServer) {
	s.RegisterService(&SyncInstances_ServiceDesc, srv)
}

func _SyncInstances_GrpcFuncInstanceIsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncInstancesServer).GrpcFuncInstanceIsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.SyncInstances/grpcFuncInstanceIsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncInstancesServer).GrpcFuncInstanceIsReady(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncInstances_GrpcFuncCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncInstancesServer).GrpcFuncCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.SyncInstances/grpcFuncCommunication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncInstancesServer).GrpcFuncCommunication(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncInstances_ServiceDesc is the grpc.ServiceDesc for SyncInstances service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncInstances_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.SyncInstances",
	HandlerType: (*SyncInstancesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "grpcFuncInstanceIsReady",
			Handler:    _SyncInstances_GrpcFuncInstanceIsReady_Handler,
		},
		{
			MethodName: "grpcFuncCommunication",
			Handler:    _SyncInstances_GrpcFuncCommunication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "typeGrpc.proto",
}
