// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncCacheDaraServerClient is the client API for SyncCacheDaraServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncCacheDaraServerClient interface {
	GrpcFuncPodIsReady(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InstanceIsReadyReplay, error)
	GrpcFuncCommunication(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type syncCacheDaraServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncCacheDaraServerClient(cc grpc.ClientConnInterface) SyncCacheDaraServerClient {
	return &syncCacheDaraServerClient{cc}
}

func (c *syncCacheDaraServerClient) GrpcFuncPodIsReady(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InstanceIsReadyReplay, error) {
	out := new(InstanceIsReadyReplay)
	err := c.cc.Invoke(ctx, "/demo.SyncCacheDaraServer/grpcFuncPodIsReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncCacheDaraServerClient) GrpcFuncCommunication(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/demo.SyncCacheDaraServer/grpcFuncCommunication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncCacheDaraServerServer is the server API for SyncCacheDaraServer service.
// All implementations must embed UnimplementedSyncCacheDaraServerServer
// for forward compatibility
type SyncCacheDaraServerServer interface {
	GrpcFuncPodIsReady(context.Context, *Empty) (*InstanceIsReadyReplay, error)
	GrpcFuncCommunication(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedSyncCacheDaraServerServer()
}

// UnimplementedSyncCacheDaraServerServer must be embedded to have forward compatible implementations.
type UnimplementedSyncCacheDaraServerServer struct {
}

func (UnimplementedSyncCacheDaraServerServer) GrpcFuncPodIsReady(context.Context, *Empty) (*InstanceIsReadyReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcFuncPodIsReady not implemented")
}
func (UnimplementedSyncCacheDaraServerServer) GrpcFuncCommunication(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcFuncCommunication not implemented")
}
func (UnimplementedSyncCacheDaraServerServer) mustEmbedUnimplementedSyncCacheDaraServerServer() {}

// UnsafeSyncCacheDaraServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncCacheDaraServerServer will
// result in compilation errors.
type UnsafeSyncCacheDaraServerServer interface {
	mustEmbedUnimplementedSyncCacheDaraServerServer()
}

func RegisterSyncCacheDaraServerServer(s grpc.ServiceRegistrar, srv SyncCacheDaraServerServer) {
	s.RegisterService(&SyncCacheDaraServer_ServiceDesc, srv)
}

func _SyncCacheDaraServer_GrpcFuncPodIsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncCacheDaraServerServer).GrpcFuncPodIsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.SyncCacheDaraServer/grpcFuncPodIsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncCacheDaraServerServer).GrpcFuncPodIsReady(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncCacheDaraServer_GrpcFuncCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncCacheDaraServerServer).GrpcFuncCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.SyncCacheDaraServer/grpcFuncCommunication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncCacheDaraServerServer).GrpcFuncCommunication(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncCacheDaraServer_ServiceDesc is the grpc.ServiceDesc for SyncCacheDaraServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncCacheDaraServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.SyncCacheDaraServer",
	HandlerType: (*SyncCacheDaraServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "grpcFuncPodIsReady",
			Handler:    _SyncCacheDaraServer_GrpcFuncPodIsReady_Handler,
		},
		{
			MethodName: "grpcFuncCommunication",
			Handler:    _SyncCacheDaraServer_GrpcFuncCommunication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "typeGrpc.proto",
}
